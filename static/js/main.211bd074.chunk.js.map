{"version":3,"sources":["serviceWorker.js","QRDialog.js","Questions.js","App.js","module/sequences.js","module/index.js","index.js"],"names":["Boolean","window","location","hostname","match","connect","props","react_default","a","createElement","Dialog_default","fullScreen","open","AppBar_default","Toolbar_default","IconButton_default","color","onClick","onClose","aria-label","Close_default","Typography_default","variant","lib_default","style","width","onScan","data","onData","Survey","metaData","addProperty","name","_ref","get","completedHtml","Object","objectWithoutProperties","survey_react","assign","ReactDOMServer","renderToString","onAfterRenderQuestion","survey","_ref2","question","htmlElement","cerebralbutton","ReactDOM","render","Button_default","signal","_templateObject","title","App","this","init","Fragment","CssBaseline_default","className","src_QRDialog","droneQRScannerActive","hideDroneQRScanner","sensorQRScannerActive","hideSensorQRScanner","Questions","json","questions","isSinglePage","onValueChanged","setSurveyData","Component","state","App_templateObject","_templateObject2","_templateObject3","showDroneQRScanner","_templateObject4","showSensorQRScanner","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","set","sequences_templateObject","sequences_templateObject2","sequences_templateObject3","sequences_templateObject4","sequences_templateObject5","sequences_templateObject6","Date","toLocaleString","toISOString","split","date","time","Module","signals","surveyData","pages","elements","type","choices","defaultValue","items","inputType","visibleIf","isRequired","placeHolder","validators","regex","text","html","controller","Controller","devtools","_cerebral_react","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.211bd074.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport {connect} from '@cerebral/react';\nimport {state,signal} from 'cerebral/tags';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport QrReader from 'react-qr-reader';\n\nfunction QRDialog(props) {\n    return (\n        <Dialog\n            fullScreen\n            open={props.open}\n        >\n          <AppBar>\n            <Toolbar>\n              <IconButton color='inherit' onClick={props.onClose} aria-label='Close'>\n                <CloseIcon />\n              </IconButton>\n              <Typography variant='h6' color='inherit'>\n                Scan QR code\n              </Typography>\n            </Toolbar>\n          </AppBar>\n            <QrReader\n                style={{width: '100%'}}\n                onScan={data => {\n                    if (!data) {\n                        return;\n                    }\n\n\t\t\t\t\tprops.onData(data);\n                    props.onClose();\n                }}\n            />\n        </Dialog>\n    );\n}\n\nexport default connect({\n}, QRDialog);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactDOMServer from 'react-dom/server';\n\nimport {connect} from '@cerebral/react';\nimport {state,signal} from 'cerebral/tags';\n\nimport Button from '@material-ui/core/Button';\n\nimport * as Survey from 'survey-react';\nimport 'survey-react/survey.css';\n\nSurvey.JsonObject.metaData.addProperty('question', {\n    name: 'cerebralbutton',\n});\n\nexport default connect(Questions);\n\nfunction Questions({get, completedHtml, ...props}) {\n    return (\n        <Survey.Survey\n            {...props}\n            completedHtml={\n                ReactDOMServer.renderToString(completedHtml)\n            }\n            onAfterRenderQuestion={\n                (survey, {question, htmlElement}) => {\n                    if (!question.cerebralbutton) {\n                        return;\n                    }\n\n                    ReactDOM.render(\n                        <Button\n                            onClick={get(signal`${question.cerebralbutton}`)}>\n                            {question.title}\n                        </Button>\n                    , htmlElement);\n                }\n            }\n        />\n    );\n}\n","import React, {Component} from 'react';\nimport {connect} from '@cerebral/react';\nimport {state,signal} from 'cerebral/tags';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport './App.css';\nimport QRDialog from './QRDialog';\nimport Questions from './Questions';\n\nclass App extends Component {\n\n    componentWillMount() {\n        this.props.init();\n    }\n\n    render() {\n        let props = this.props;\n        return (\n            <React.Fragment>\n            <CssBaseline />\n            <div className='App'>\n                <QRDialog\n                    open={props.droneQRScannerActive}\n                    onClose={props.hideDroneQRScanner}\n                />\n                <QRDialog\n                    open={props.sensorQRScannerActive}\n                    onClose={props.hideSensorQRScanner}\n                />\n                <Questions\n                    json={props.questions}\n                    isSinglePage={false}\n                    completedHtml={\n                        (<div> woo done!</div>)\n                    }\n                    onValueChanged={({data}) => props.setSurveyData({data})}\n                />\n            </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default connect({\n    questions: state`questions`,\n    droneQRScannerActive: state`droneQRScannerActive`,\n    sensorQRScannerActive: state`sensorQRScannerActive`,\n    showDroneQRScanner: signal`showDroneQRScanner`,\n    showSensorQRScanner: signal`showSensorQRScanner`,\n    hideDroneQRScanner: signal`hideDroneQRScanner`,\n    hideSensorQRScanner: signal`hideSensorQRScanner`,\n    setSurveyData: signal`setSurveyData`,\n    init: signal`init`,\n}, App);\n","import { set } from 'cerebral/operators';\nimport { state,props } from 'cerebral/tags';\nimport { sequence, parallel } from 'cerebral';\n\nexport const init = [];\n\nexport const showDroneQRScanner = [set(state`droneQRScannerActive`, true)];\nexport const hideDroneQRScanner = [set(state`droneQRScannerActive`, false)];\nexport const showSensorQRScanner = [set(state`sensorQRScannerActive`, true)];\nexport const hideSensorQRScanner = [set(state`sensorQRScannerActive`, false)];\n\nexport const setSurveyData = [set(state`surveyData`, props`data`)]; \n","import { Module } from 'cerebral';\nimport { set } from 'cerebral/operators';\nimport { state } from 'cerebral/tags';\n\nimport * as signals from './sequences';\n\n// TODO: Get current date/time better\nvar [date, time] = (new Date((new Date()).toLocaleString() + ' UTC'))\n        .toISOString().split(/[TZ]/);\n\nexport default Module({\n    signals,\n    state: {\n        droneQRScannerActive: false,\n        sensorQRScannerActive: false,\n        surveyData: null,\n        questions: {\n            pages: [\n                {\n                    name: 'general',\n                    title: 'General',\n                    elements: [\n                        {\n                            name: 'purpose',\n                            title: 'Purpose',\n                            type: 'dropdown',\n                            choices: [\n                                'UAV',\n                                'Planting',\n                                'Spraying',\n                                'Tilling',\n                                'Harvest'\n                            ],\n                            defaultValue: 'UAV' // TODO: remove default later\n                        },\n                        {\n                            name: 'datetime',\n                            title: 'Date/Time of data',\n                            type: 'multipletext',\n                            defaultValue: {\n                                date: date,\n                                time: time,\n                            },\n                            items: [\n                                {\n                                    name: 'date',\n                                    title: 'Date',\n                                    inputType: 'date',\n                                },\n                                {\n                                    name: 'time',\n                                    title: 'Time',\n                                    inputType: 'time',\n                                },\n                            ]\n                        },\n                        {\n                            name: 'notes',\n                            title: 'Notes or comments',\n                            type: 'comment'\n                        },\n                    ]\n                },\n                {\n                    name: 'uav',\n                    title: 'UAV Info',\n                    visibleIf: '{purpose} == \"UAV\"',\n                    elements: [\n                        {\n                            name: 'license',\n                            title: 'Operator License',\n                            type: 'text',\n                            isRequired: true,\n                            placeHolder: 'xxxx-xxxx',\n                            validators: [\n                                {\n                                    type: 'regex',\n                                    regex: /[A-Z0-9]{4}-[A-Z0-9]{4}/,\n                                    text: 'Invalid license number'\n                                }\n                            ]\n                        },\n                        {\n                            name: 'operator',\n                            title: 'Operator',\n                            type: 'text',\n                            isRequired: true,\n                            placeHolder: 'Rusty Shackleford'\n                        },\n                        {\n                            name: 'observer',\n                            title: 'Observer',\n                            type: 'text',\n                            isRequired: true,\n                            placeHolder: 'John Doe'\n                        },\n                        {\n                            name: 'drone-qr',\n                            title: 'Scan drone QR code',\n                            type: 'html',\n                            cerebralbutton: 'showDroneQRScanner',\n                        },\n                        {\n                            name: 'sensor-qr',\n                            type: 'html',\n                            cerebralbutton: 'showSensorQRScanner',\n                        },\n                    ]\n                },\n                {\n                    name: 'planting',\n                    visibleIf: '!({purpose} == \"UAV\")',\n                    elements: [\n                        {\n                            name: 'nyi',\n                            type: 'html',\n                            html: 'Not yet implemented'\n                        }\n                    ]\n                },\n            ]\n        }\n    },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Controller } from 'cerebral';\nimport { Container } from '@cerebral/react';\nimport devtools from 'cerebral/devtools';\n\nimport App from './App';\nimport Module from './module';\n\nconst controller = Controller(Module, {\n    devtools: process.env.NODE_ENV === 'production' ?\n        null : devtools({host: 'localhost:8000', reconnect: true})\n});\n\nReactDOM.render(\n    <Container controller={controller}>\n\t\t<App />\n\t</Container>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}