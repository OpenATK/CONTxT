{"version":3,"sources":["serviceWorker.js","QRDialog.js","surveyModel.js","Questions.js","App.js","module/errors.js","module/providers.js","module/actions.js","module/sequences.js","module/index.js","index.js"],"names":["Boolean","window","location","hostname","match","connect","props","react_default","a","createElement","Dialog_default","fullScreen","open","AppBar_default","Toolbar_default","IconButton_default","color","onClick","onClose","aria-label","Close_default","Typography_default","variant","lib_default","style","width","onScan","data","onData","surveyModel","model","Survey","metaData","addProperty","name","questions","state","_templateObject2","init","signal","_templateObject3","_ref3","ownProps","get","Object","objectWithoutProperties","objectSpread","_ref","survey_react","assign","completedHtml","ReactDOMServer","renderToString","onAfterRenderQuestion","survey","_ref2","question","htmlElement","cerebralbutton","ReactDOM","render","Button_default","_templateObject","title","App","this","Fragment","CssBaseline_default","className","src_QRDialog","droneQRScannerActive","hideDroneQRScanner","sensorQRScannerActive","hideSensorQRScanner","src_Questions","isSinglePage","onValueChanged","setSurveyData","onComplete","console","log","JSON","stringify","Component","App_templateObject","App_templateObject2","App_templateObject3","showDroneQRScanner","_templateObject4","showSensorQRScanner","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","GetLocationError","_CerebralError","message","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","inherits","CerebralError","geolocation","getCurrentLoc","_getCurrentLoc","asyncToGenerator","regenerator_default","mark","_callee","msg","wrap","_context","prev","next","Promise","resolve","reject","navigator","getCurrentPosition","then","pos","coords","abrupt","sent","t0","t1","code","stop","apply","arguments","setAnswer","value","setValue","setData","answer","set","sequences_templateObject","sequences_templateObject2","sequences_templateObject3","sequences_templateObject4","sequences_templateObject5","sequences_templateObject6","actions","setCurrentLocation","currentLoc","latitude","longitude","sequences_templateObject7","sequences_templateObject8","sequences_templateObject9","_templateObject10","_templateObject11","_templateObject12","Date","toLocaleString","toISOString","split","date","time","Module","signals","surveyData","pages","elements","type","choices","defaultValue","items","inputType","isRequired","visibleIf","placeHolder","validators","regex","text","panelCount","panelAddText","panelRemoveText","templateTitle","templateElements","valueName","hasOther","hideIfChoicesEmpty","choicesVisibleIf","make","requiredIf","html","providers","controller","Controller","devtools","_cerebral_react","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8b4d3d71.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport {connect} from '@cerebral/react';\nimport {state,signal} from 'cerebral/tags';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport QrReader from 'react-qr-reader';\n\nfunction QRDialog(props) {\n    return (\n        <Dialog\n            fullScreen\n            open={props.open}\n        >\n          <AppBar>\n            <Toolbar>\n              <IconButton color='inherit' onClick={props.onClose} aria-label='Close'>\n                <CloseIcon />\n              </IconButton>\n              <Typography variant='h6' color='inherit'>\n                Scan QR code\n              </Typography>\n            </Toolbar>\n          </AppBar>\n            <QrReader\n                style={{width: '100%'}}\n                onScan={data => {\n                    if (!data) {\n                        return;\n                    }\n\n\t\t\t\t\tprops.onData(data);\n                    props.onClose();\n                }}\n            />\n        </Dialog>\n    );\n}\n\nexport default connect({\n}, QRDialog);\n","// TODO: This is probably the wrong way to do stuff, but I don't know cerebral\n// Want a singleton of survey model\nexport default {\n    model: null\n};\n","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactDOMServer from 'react-dom/server';\n\nimport {connect} from '@cerebral/react';\nimport {state, signal} from 'cerebral/tags';\n\nimport Button from '@material-ui/core/Button';\n\nimport * as Survey from 'survey-react';\nimport 'survey-react/survey.css';\n\nimport surveyModel from './surveyModel';\n\nSurvey.JsonObject.metaData.addProperty('question', {\n    name: 'cerebralbutton',\n});\n\nfunction Questions({get, ...props}) {\n    return (\n        <Survey.Survey\n            {...props}\n            completedHtml={\n                ReactDOMServer.renderToString(props.completedHtml)\n            }\n            onAfterRenderQuestion={\n                (survey, {question, htmlElement}) => {\n                    if (!question.cerebralbutton) {\n                        return;\n                    }\n\n                    ReactDOM.render(\n                        <Button\n                            onClick={get(signal`${question.cerebralbutton}`)}>\n                            {question.title}\n                        </Button>\n                    , htmlElement);\n                }\n            }\n        />\n    );\n}\n\nexport default connect(\n    {\n        questions: state`questions`,\n        init: signal`initSurvey`,\n    },\n    ({questions, ...props}, ownProps, get) => {\n        let model = new Survey.Model(questions);\n        surveyModel.model = model;\n\n        return {\n            ...ownProps,\n            ...props,\n            get,\n            model,\n        };\n    },\n    Questions\n);\n","import React, {Component} from 'react';\nimport {connect} from '@cerebral/react';\nimport {state,signal} from 'cerebral/tags';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport './App.css';\nimport QRDialog from './QRDialog';\nimport Questions from './Questions';\n\nclass App extends Component {\n\n    componentWillMount() {\n        this.props.init();\n    }\n\n    render() {\n        let props = this.props;\n        return (\n            <React.Fragment>\n            <CssBaseline />\n            <div className='App'>\n                <QRDialog\n                    open={props.droneQRScannerActive}\n                    onClose={props.hideDroneQRScanner}\n                />\n                <QRDialog\n                    open={props.sensorQRScannerActive}\n                    onClose={props.hideSensorQRScanner}\n                />\n                <Questions\n                    isSinglePage={false}\n                    completedHtml={\n                        (<div> woo done!</div>)\n                    }\n                    onValueChanged={({data}) => props.setSurveyData({data})}\n                    onComplete={({data}) => console.log(JSON.stringify(data))}\n                />\n            </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default connect({\n    questions: state`questions`,\n    droneQRScannerActive: state`droneQRScannerActive`,\n    sensorQRScannerActive: state`sensorQRScannerActive`,\n    showDroneQRScanner: signal`showDroneQRScanner`,\n    showSensorQRScanner: signal`showSensorQRScanner`,\n    hideDroneQRScanner: signal`hideDroneQRScanner`,\n    hideSensorQRScanner: signal`hideSensorQRScanner`,\n    setSurveyData: signal`setSurveyData`,\n    init: signal`init`,\n}, App);\n","import {CerebralError} from 'cerebral';\n\nexport class GetLocationError extends CerebralError {\n    constructor(message) {\n        super(message);\n        this.name = 'GetLocationError';\n    }\n}\n","//import Promise from 'bluebird';\n//import {state} from 'cerebral';\nimport {GetLocationError} from './errors';\nimport model from '../surveyModel';\n\nexport const geolocation = {\n    async getCurrentLoc() {\n        try {\n            return await new Promise((resolve, reject) =>\n                    navigator.geolocation.getCurrentPosition(resolve, reject))\n                .then(pos => pos.coords);\n        } catch (err) {\n            let msg;\n\n            switch (err.code) {\n                case 1: // PERMISSION_DENIED\n                    msg = 'Permission denied';\n                    break;\n                case 2: // POSITION_UNAVAILABLE\n                    msg = 'Position unavailable';\n                    break;\n                case 3: // TIMEOUT\n                    msg = 'Timeout obtaining position';\n                    break;\n                default:\n                    msg = 'Unknown error';\n            }\n\n            throw new GetLocationError(msg);\n        }\n    }\n};\n\nexport const survey = {\n    setAnswer(name, value) {\n        model.model.setValue(name, value);\n    },\n\n    setData(data) {\n        model.model.data = data;\n    },\n};\n","//import {state} from 'cerebral';\n\nexport function getCurrentLocation({geolocation}) {\n    return geolocation.getCurrentLoc()\n        .then(({latitude, longitude}) => ({currentLoc: {latitude, longitude}}));\n}\n\nexport function setAnswer({survey, props}) {\n    return survey.setAnswer(props.question, props.answer);\n}\nexport function setSurveyData({survey, props}) {\n    return survey.setData(props.data);\n}\n","import {set, merge} from 'cerebral/operators';\nimport {state, props} from 'cerebral/tags';\nimport * as actions from './actions';\nimport {sequence, parallel} from 'cerebral';\n\nexport const init = [];\n\nexport const showDroneQRScanner = [set(state`droneQRScannerActive`, true)];\nexport const hideDroneQRScanner = [set(state`droneQRScannerActive`, false)];\nexport const showSensorQRScanner = [set(state`sensorQRScannerActive`, true)];\nexport const hideSensorQRScanner = [set(state`sensorQRScannerActive`, false)];\n\nexport const setSurveyData = [set(state`surveyData`, props`data`)];\nexport const setAnswer = [actions.setAnswer];\nexport const setCurrentLocation = [\n    actions.getCurrentLocation,\n    set(props`question`, 'latitude'),\n    set(props`answer`, props`currentLoc.latitude`),\n    actions.setAnswer,\n    set(props`question`, 'longitude'),\n    set(props`answer`, props`currentLoc.longitude`),\n    actions.setAnswer,\n];\n","import { Module } from 'cerebral';\n//import { set } from 'cerebral/operators';\n//import { state } from 'cerebral/tags';\n//\nimport * as Survey from 'survey-react';\n\nimport * as providers from './providers';\nimport * as signals from './sequences';\n\n// TODO: Get current date/time better\nvar [date, time] = (new Date((new Date()).toLocaleString() + ' UTC'))\n        .toISOString().split(/[TZ]/);\n\nexport default Module({\n    signals,\n    state: {\n        droneQRScannerActive: false,\n        sensorQRScannerActive: false,\n        surveyData: null,\n        questions: {\n            pages: [\n                {\n                    name: 'general',\n                    title: 'General',\n                    elements: [\n                        {\n                            name: 'purpose',\n                            title: 'Purpose',\n                            type: 'dropdown',\n                            choices: [\n                                'UAV',\n                                'Planting',\n                                'Spraying',\n                                'Tilling',\n                                'Harvest'\n                            ],\n                            defaultValue: 'UAV' // TODO: remove default later\n                        },\n                        {\n                            name: 'datetime',\n                            title: 'Date/Time of data',\n                            type: 'multipletext',\n                            defaultValue: {\n                                date: date,\n                                time: time,\n                            },\n                            items: [\n                                {\n                                    name: 'date',\n                                    title: 'Date',\n                                    inputType: 'date',\n                                },\n                                {\n                                    name: 'time',\n                                    title: 'Time',\n                                    inputType: 'time',\n                                },\n                            ]\n                        },\n                        {\n                            // TODO: Support selecting region on a map\n                            name: 'location',\n                            title: 'Collection location',\n                            type: 'panel',\n                            elements: [\n                                {\n                                    name: 'location-button',\n                                    title: 'Get current location',\n                                    type: 'html',\n                                    cerebralbutton: 'setCurrentLocation',\n                                },\n                                {\n                                    name: 'latitude',\n                                    title: 'Latitude',\n                                    type: 'text',\n                                    isRequired: true,\n                                },\n                                {\n                                    name: 'longitude',\n                                    title: 'Longitude',\n                                    type: 'text',\n                                    isRequired: true,\n                                },\n                            ],\n                        },\n                        {\n                            name: 'notes',\n                            title: 'Notes or comments',\n                            type: 'comment'\n                        },\n                    ]\n                },\n                {\n                    name: 'uav-operator',\n                    title: 'UAV Operator',\n                    visibleIf: '{purpose} == \"UAV\"',\n                    elements: [\n                        {\n                            name: 'license',\n                            title: 'Operator License',\n                            type: 'text',\n                            isRequired: true,\n                            placeHolder: '1234567',\n                            validators: [\n                                {\n                                    type: 'regex',\n                                    regex: /^[0-9]{7}$/,\n                                    text: 'Invalid license number'\n                                }\n                            ]\n                        },\n                        {\n                            name: 'operator',\n                            title: 'Operator',\n                            type: 'text',\n                            isRequired: true,\n                            placeHolder: 'Rusty Shackleford'\n                        },\n                        {\n                            name: 'observer',\n                            title: 'Observer',\n                            type: 'text',\n                            isRequired: true,\n                            placeHolder: 'John Doe'\n                        },\n                        {\n                            name: 'drone-qr',\n                            title: 'Scan drone QR code',\n                            type: 'html',\n                            cerebralbutton: 'showDroneQRScanner',\n                        },\n                    ]\n                },\n                {\n                    name: 'uav-sensors',\n                    title: 'Sensors',\n                    visibleIf: '{purpose} == \"UAV\"',\n                    elements: [\n                        {\n                            name: 'sensor-qr',\n                            type: 'html',\n                            cerebralbutton: 'showSensorQRScanner',\n                        },\n                        {\n                            name: 'sensors',\n                            title: 'Sensors',\n                            type: 'paneldynamic',\n                            panelCount: 1,\n                            panelAddText: 'Add Sensor',\n                            panelRemoveText: 'Remove Sensor',\n                            templateTitle: 'Sensor #{panelIndex}',\n                            templateElements: [\n                                {\n                                    name: 'uav-sensor-type',\n                                    valueName: 'type',\n                                    title: 'Type',\n                                    type: 'dropdown',\n                                    isRequired: true,\n                                    hasOther: true,\n                                    choices: [\n                                        'RGB',\n                                        'Multispectral',\n                                        'Hyperspectral',\n                                        'LiDAR',\n                                        'Thermal',\n                                    ],\n                                },\n                                {\n                                    name: 'uav-sensor',\n                                    //valueName: 'sensor',\n                                    title: 'Sensor',\n                                    type: 'dropdown',\n                                    hideIfChoicesEmpty: true,\n                                    choicesVisibleIf: '{panel.type} == {item.type}',\n                                    choices: [\n                                        {\n                                            text: 'Sony A6000',\n                                            value: {\n                                                make: 'Sony',\n                                                model: 'A6000',\n                                                type: 'RGB',\n                                            },\n                                        },\n                                        {\n                                            text: 'Parrot Sequoia',\n                                            value: {\n                                                make: 'Parrot',\n                                                model: 'Sequoia',\n                                                type: 'Multispectral',\n                                            },\n                                        },\n                                    ],\n                                },\n                                {\n                                    name: 'uav-sensor-make',\n                                    valueName: 'sensor.make',\n                                    title: 'Make',\n                                    type: 'text',\n                                },\n                                {\n                                    name: 'uav-sensor-model',\n                                    valueName: 'model',\n                                    title: 'Model',\n                                    type: 'text',\n                                },\n                            ],\n                        },\n                    ],\n                },\n                {\n                    name: 'b4ufly',\n                    title: 'B4UFLY Status',\n                    visibleIf: '{purpose} == \"UAV\"',\n                    elements: [\n                        {\n                            name: 'b4ufly-status',\n                            title: 'Status',\n                            type: 'dropdown',\n                            isRequired: true,\n                            choices: [\n                                'proceed with caution',\n                                'flying in controlled airspace (class B/C/D/E)',\n                                'other',\n                            ],\n                        },\n                        {\n                            name: 'b4ufly-extra',\n                            title: '',\n                            type: 'panel',\n                            visibleIf: '{b4ufly-status} == \"flying in controlled airspace (class B/C/D/E)\" or {b4ufly-status} == \"other\"',\n                            elements: [\n                                {\n                                    name: 'b4ufly-airport-operator',\n                                    title: 'Airport Operator Contact',\n                                    type: 'text',\n                                    requiredIf: '{b4ufly-status} == \"flying in controlled airspace (class B/C/D/E)\"',\n                                },\n                                {\n                                    name: 'b4ufly-control-tower',\n                                    title: 'Control Tower Contact',\n                                    type: 'text',\n                                    requiredIf: '{b4ufly-status} == \"flying in controlled airspace (class B/C/D/E)\"',\n                                },\n                                {\n                                    name: 'b4ufly-prior-authorization',\n                                    title: 'Prior Authorization',\n                                    type: 'text',\n                                    requiredIf: '{b4ufly-status} == \"flying in controlled airspace (class B/C/D/E)\"',\n                                },\n                            ],\n                        },\n                        {\n                            // TODO: What the heck even is this?\n                            name: 'b4ufly-options',\n                            title: 'Options',\n                            type: 'checkbox',\n                            isRequired: true,\n                            choices: [\n                                'checked NOTAMS',\n                                'checked flight restrictions',\n                                'checked local restrictions',\n                                'checked upcoming restrictions',\n                                'checked national parks',\n                            ],\n                        },\n                    ],\n                },\n                {\n                    name: 'planting',\n                    visibleIf: '!({purpose} == \"UAV\")',\n                    elements: [\n                        {\n                            name: 'nyi',\n                            type: 'html',\n                            html: 'Not yet implemented'\n                        }\n                    ]\n                },\n            ]\n        }\n    },\n    providers,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Controller } from 'cerebral';\nimport { Container } from '@cerebral/react';\nimport devtools from 'cerebral/devtools';\n\nimport App from './App';\nimport Module from './module';\n\nconst controller = Controller(Module, {\n    devtools: process.env.NODE_ENV === 'production' ?\n        null : devtools({host: 'localhost:8000', reconnect: true})\n});\n\nReactDOM.render(\n    <Container controller={controller}>\n\t\t<App />\n\t</Container>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}